#!/usr/bin/env python3

"""
Main entry point for starting a training job.
"""

import os
import sys
import argparse
import subprocess
import shutil
import logging

from training.logging_setup import setup_logging, setup_data_logger

parser = argparse.ArgumentParser(description="""
    Run agent training using proximal policy optimization.

    This will set up the data/log directories, optionally install any needed
    dependencies, start tensorboard, configure loggers, and start the actual
    training loop. If the data directory already exists, it will prompt for
    whether the existing data should be overwritten or appended. The latter
    allows for training to be restarted if interrupted.
    """)
parser.add_argument('data_dir',
    help="the directory in which to store this run's data")
parser.add_argument('--shutdown', action="store_true",
    help="Shut down the system when the job is complete"
    "(helpful for running remotely).")
parser.add_argument('--port', default=6006, type=int,
    help="Port on which to run tensorboard.")
parser.add_argument('--run-type', choices=('train', 'benchmark', 'inspect'),
    default='train',
    help="What to do once the algorithm and environments have been loaded. "
    "If 'train', train the model. If 'benchmark', run the model on testing "
    "environments. If 'inspect', load an ipython prompt for interactive "
    "debugging.")
parser.add_argument('-p', '--impact-penalty', action='append', type=float)
parser.add_argument('--penalty-baseline',
    choices=('starting-state', 'inaction'), default='starting-state')
parser.add_argument('-e', '--env-type', default='prune-still')
parser.add_argument('--algo', choices=('ppo', 'dqn'), default='ppo')
parser.add_argument('--seed', default=None, type=int)
args = parser.parse_args()


# Setup the directories

safety_dir = os.path.realpath(os.path.join(__file__, '../'))
data_dir = os.path.realpath(args.data_dir)
job_name = os.path.basename(data_dir)
sys.path.insert(1, safety_dir)  # ensure current directory is on the path
os.chdir(safety_dir)

if os.path.exists(data_dir) and args.data_dir is not None and args.run_type == 'train':
    print("The directory '%s' already exists. "
          "Would you like to overwrite the old data, append to it, or abort?" %
          data_dir)
    response = 'overwrite' if job_name.startswith('tmp') else None
    while response not in ('overwrite', 'append', 'abort'):
        response = input("(overwrite / append / abort) > ")
    if response == 'overwrite':
        print("Overwriting old data.")
        shutil.rmtree(data_dir)
    elif response == 'abort':
        print("Aborting.")
        exit()

os.makedirs(data_dir, exist_ok=True)
logger = setup_logging(data_dir, debug=(args.run_type == 'inspect'))


# Build the safelife C extensions.
# By making the build lib the same as the base folder, the extension
# should just get built into the source directory.
subprocess.run([
    "python3", os.path.join(safety_dir, "setup.py"),
    "build_ext", "--build-lib", safety_dir
])


# Start tensorboard

if args.port:
    tb_proc = subprocess.Popen([
        "tensorboard", "--logdir_spec", job_name + ':' + data_dir, '--port', str(args.port)])


# Start training!

try:
    import numpy as np
    from training.env_factory import build_environments
    from safelife.random import set_rng

    main_seed = np.random.SeedSequence(args.seed)
    logger.info("COMMAND ARGUMENTS: %s", ' '.join(sys.argv))
    logger.info("SETTING GLOBAL SEED: %i", main_seed.entropy)
    set_rng(np.random.default_rng(main_seed))

    for penalty in args.impact_penalty or [None]:
        if penalty is None:
            subdir = data_dir
            subjob_name = job_name
        else:
            subdir = os.path.join(data_dir, "penalty_{:0.2f}".format(penalty))
            subjob_name = "{}-p{:0.2f}".format(job_name, penalty)

        data_logger = setup_data_logger(subdir, args.run_type)

        use_wandb = False
        if (os.path.exists(os.path.join(safety_dir, 'wandb/settings'))
                and args.run_type != 'inspect'):
            import wandb
            if wandb.login():
                wandb.init(reinit=True, name=subjob_name, config=args,
                           sync_tensorboard=True)
                wandb.config.penalty = penalty
                use_wandb = True

        training_envs, testing_envs = build_environments(
            args.env_type, args.run_type, main_seed, data_logger,
            penalty, args.penalty_baseline)

        if args.algo == 'ppo':
            from training.models import SafeLifePolicyNetwork
            from training.ppo import PPO_MultiAgent

            obs_shape = training_envs[0].observation_space.shape
            model = SafeLifePolicyNetwork(obs_shape)
            algo = PPO_MultiAgent(
                model,
                training_envs=training_envs,
                testing_envs=testing_envs,
                data_logger=data_logger)

        elif args.algo == 'dqn':
            from training.models import SafeLifeQNetwork
            from training.dqn import DQN

            obs_shape = training_envs[0].observation_space.shape
            train_model = SafeLifeQNetwork(obs_shape)
            target_model = SafeLifeQNetwork(obs_shape)
            algo = DQN(
                train_model, target_model,
                training_envs=training_envs,
                testing_envs=testing_envs,
                data_logger=data_logger)
        else:
            logging.error("Unexpected algorithm type '%s'", args.algo)
            raise ValueError("unexpected algorithm type")

        if args.run_type == "train":
            algo.train(6e6)
        elif args.run_type == "benchmark":
            algo.run_episodes(testing_envs, num_episodes=1000)
        elif args.run_type == "inspect":
            from IPython import embed
            print('')
            embed()

        if use_wandb:
            wandb.join()


except Exception:
    logging.exception("Ran into an unexpected error. Aborting training.")
finally:
    if args.port:
        tb_proc.kill()
    if args.shutdown:
        # Shutdown in 3 minutes.
        # Enough time to recover if it crashed at the start.
        subprocess.run("sudo shutdown +3".split())
        logging.critical("Shutdown commenced. Exiting to bash.")
        subprocess.run(["bash", "-il"])
